# Admin Dashboard System

## Dashboard Overview

Welcome to the Admin Dashboard System. This dashboard provides a comprehensive overview of the key metrics and activities within your application. From here, you can manage users, view reports, and access various administrative features.

## Key Metrics

- **Total Users**: 1,024
- **Active Sessions**: 256
- **Total Revenue**: $12,340
- **System Performance**: 98.7% uptime

## Quick Actions

- **Create New User**: Quickly add a new user to the system.
- **Generate Report**: Create a new report based on the latest data.
- **Manage Settings**: Update your account or application settings.

## Recent Activity

- **User Signups**: View the latest user signups and their details.
- **System Alerts**: Important alerts regarding system performance or security.
- **Revenue Changes**: Recent changes in revenue metrics.

## Navigation

- **Dashboard**: Overview of key metrics and quick actions.
- **Users Management**: Detailed view and management of users.
- **Settings**: Update your account and application settings.
- **Reports**: Generate and view reports.

## Support

For assistance, please contact the support team or visit the help center.

---

<!-- Add after SafeLink Templates section -->
<div class="dashboard-section">
    <h2>🚀 Ultra Pro Max Website Embeds</h2>
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-value" id="total-embeds">0</div>
            <div class="stat-label">Total Embeds</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="embed-views">0</div>
            <div class="stat-label">Total Embed Views</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="active-syncs">0</div>
            <div class="stat-label">Active Syncs</div>
        </div>
    </div>
    
    <div class="embed-creator">
        <h3>Create New Embed</h3>
        <div class="form-group">
            <label>URL to Embed:</label>
            <input type="url" id="embed-url" class="form-control" placeholder="https://example.com">
        </div>
        <div class="form-group">
            <label>Template:</label>
            <select id="embed-template" class="form-control">
                <option value="minimal">Minimal</option>
                <option value="card" selected>Card (Recommended)</option>
                <option value="full">Full</option>
                <option value="custom">Custom</option>
            </select>
        </div>
        <div class="form-group">
            <label>Customization (JSON):</label>
            <textarea id="embed-customization" class="form-control" rows="3">{
  "theme": "default",
  "showStats": true
}</textarea>
        </div>
        <button onclick="createEmbed()" class="btn btn-primary">
            <span class="btn-icon">🌟</span> Generate Ultra Pro Max Embed
        </button>
    </div>
    
    <div id="embed-result" style="display: none;" class="result-box">
        <h4>✨ Embed Created Successfully!</h4>
        <div class="embed-preview">
            <label>Embed Code:</label>
            <textarea id="embed-code-output" class="form-control" rows="6" readonly></textarea>
            <button onclick="copyEmbedCode()" class="btn btn-secondary">Copy Code</button>
        </div>
        <div class="embed-preview">
            <label>Preview URL:</label>
            <input type="text" id="embed-preview-url" class="form-control" readonly>
            <button onclick="openEmbedPreview()" class="btn btn-secondary">Open Preview</button>
        </div>
    </div>
    
    <div class="embeds-list">
        <h3>Recent Embeds</h3>
        <div id="embeds-table">
            <div class="loading">Loading embeds...</div>
        </div>
    </div>
</div>

<style>
    /* Ultra Pro Max Embed Styles */
    .embed-creator {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 25px;
        border-radius: 12px;
        color: white;
        margin: 20px 0;
    }
    
    .embed-creator h3 {
        margin-top: 0;
        color: white;
    }
    
    .embed-creator label {
        color: rgba(255, 255, 255, 0.9);
        font-weight: 500;
    }
    
    .embed-creator .form-control {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
    }
    
    .embed-creator .form-control::placeholder {
        color: rgba(255, 255, 255, 0.5);
    }
    
    .embed-creator .form-control:focus {
        background: rgba(255, 255, 255, 0.15);
        border-color: rgba(255, 255, 255, 0.4);
        color: white;
    }
    
    #embed-result {
        background: #f8f9fa;
        border: 2px solid #28a745;
        border-radius: 8px;
        padding: 20px;
        margin: 20px 0;
    }
    
    .embed-preview {
        margin: 15px 0;
    }
    
    .embeds-list {
        margin-top: 30px;
    }
    
    .embed-item {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .embed-info {
        flex: 1;
    }
    
    .embed-url {
        font-weight: 500;
        color: #495057;
        margin-bottom: 5px;
    }
    
    .embed-meta {
        font-size: 12px;
        color: #6c757d;
    }
    
    .embed-stats {
        text-align: right;
    }
    
    .embed-views {
        font-size: 24px;
        font-weight: bold;
        color: #667eea;
    }
    
    .embed-label {
        font-size: 11px;
        color: #6c757d;
        text-transform: uppercase;
    }
    
    /* Additional styles for embed management */
    .embed-actions {
        display: flex;
        gap: 8px;
        margin-left: 20px;
    }
    
    .btn-sm {
        padding: 4px 12px;
        font-size: 0.875rem;
    }
    
    .btn-outline-primary {
        color: #667eea;
        border: 1px solid #667eea;
        background: transparent;
    }
    
    .btn-outline-primary:hover {
        background: #667eea;
        color: white;
    }
    
    .btn-outline-secondary {
        color: #6c757d;
        border: 1px solid #6c757d;
        background: transparent;
    }
    
    .btn-outline-secondary:hover {
        background: #6c757d;
        color: white;
    }
    
    .btn-success {
        background: #28a745 !important;
        color: white !important;
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    .embed-item:hover {
        transform: translateX(4px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    /* Experimental features styles */
    .experimental-features {
        background: #1a1a2e;
        padding: 30px;
        border-radius: 16px;
        color: white;
    }
    
    .feature-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .feature-card {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 20px;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .feature-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }
    
    .feature-card.beta::before {
        content: 'BETA';
        position: absolute;
        top: 10px;
        right: -20px;
        background: #ff6b6b;
        color: white;
        padding: 2px 30px;
        font-size: 10px;
        transform: rotate(45deg);
        font-weight: bold;
    }
    
    .feature-card.experimental::before {
        content: 'EXPERIMENTAL';
        position: absolute;
        top: 10px;
        right: -40px;
        background: #4ecdc4;
        color: white;
        padding: 2px 50px;
        font-size: 10px;
        transform: rotate(45deg);
        font-weight: bold;
    }
    
    .feature-icon {
        font-size: 48px;
        margin-bottom: 10px;
    }
    
    .feature-card h4 {
        margin: 10px 0;
        color: white;
    }
    
    .feature-card p {
        font-size: 14px;
        color: rgba(255, 255, 255, 0.7);
        margin-bottom: 20px;
    }
    
    /* Toggle switch */
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }
    
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #2d3748;
        transition: .4s;
        border-radius: 34px;
    }
    
    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }
    
    input:checked + .slider {
        background-color: #667eea;
    }
    
    input:checked + .slider:before {
        transform: translateX(26px);
    }
    
    /* AI Analytics Dashboard */
    .ai-dashboard {
        display: none;
        margin-top: 30px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 20px;
    }
    
    .ai-insights {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-top: 20px;
    }
    
    .insight-card {
        background: rgba(102, 126, 234, 0.1);
        border: 1px solid rgba(102, 126, 234, 0.3);
        border-radius: 8px;
        padding: 15px;
        text-align: center;
    }
    
    .insight-value {
        font-size: 28px;
        font-weight: bold;
        color: #667eea;
    }
    
    .insight-label {
        font-size: 12px;
        color: rgba(255, 255, 255, 0.6);
        margin-top: 5px;
    }
    
    /* YouTube Embed Styles */
    .youtube-embed-section {
        background: #fff;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .youtube-creator {
        background: #f8f9fa;
        padding: 25px;
        border-radius: 8px;
        margin: 20px 0;
    }
    
    .form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .form-row .form-group {
        flex: 1;
    }
    
    .youtube-features {
        margin: 20px 0;
    }
    
    .feature-toggles {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 15px;
        margin-top: 10px;
    }
    
    .feature-toggle {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        padding: 8px;
        background: white;
        border-radius: 6px;
        transition: background 0.2s;
    }
    
    .feature-toggle:hover {
        background: #e9ecef;
    }
    
    .feature-toggle input {
        cursor: pointer;
    }
    
    .btn-danger {
        background: #ff0000;
        border-color: #ff0000;
    }
    
    .btn-danger:hover {
        background: #cc0000;
        border-color: #cc0000;
    }
    
    .analytics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        border: 1px solid #dee2e6;
    }
    
    .metric-icon {
        font-size: 32px;
        margin-bottom: 10px;
    }
    
    .metric-value {
        font-size: 28px;
        font-weight: bold;
        color: #495057;
        margin: 10px 0;
    }
    
    .quality-distribution {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
    }
    
    #quality-chart {
        height: 200px;
        display: flex;
        align-items: flex-end;
        gap: 10px;
        margin-top: 15px;
    }
    
    .quality-bar {
        flex: 1;
        background: #ff0000;
        border-radius: 4px 4px 0 0;
        position: relative;
        min-height: 20px;
        transition: all 0.3s;
    }
    
    .quality-bar:hover {
        opacity: 0.8;
    }
    
    .quality-label {
        position: absolute;
        bottom: -25px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 12px;
        white-space: nowrap;
    }
</style>

<script>
// Ultra Pro Max Embed Functions
async function createEmbed() {
    const url = document.getElementById('embed-url').value;
    const template = document.getElementById('embed-template').value;
    let customization = {};
    
    try {
        customization = JSON.parse(document.getElementById('embed-customization').value);
    } catch (e) {
        console.error('Invalid JSON customization');
    }
    
    if (!url) {
        alert('Please enter a URL to embed');
        return;
    }
    
    try {
        const response = await fetch('/api/embeds/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                url,
                template,
                customization
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('embed-code-output').value = data.embedCode;
            document.getElementById('embed-preview-url').value = data.previewUrl;
            document.getElementById('embed-result').style.display = 'block';
            
            // Update stats
            updateEmbedStats();
            // Refresh embeds list
            loadEmbeds();
        } else {
            alert('Error creating embed: ' + data.error);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to create embed');
    }
}

function copyEmbedCode() {
    const codeField = document.getElementById('embed-code-output');
    codeField.select();
    document.execCommand('copy');
    
    // Show copy feedback
    const btn = event.target;
    const originalText = btn.textContent;
    btn.textContent = '✓ Copied!';
    btn.classList.add('btn-success');
    setTimeout(() => {
        btn.textContent = originalText;
        btn.classList.remove('btn-success');
    }, 2000);
}

function openEmbedPreview() {
    const url = document.getElementById('embed-preview-url').value;
    window.open(url, '_blank');
}

async function updateEmbedStats() {
    try {
        const response = await fetch('/api/admin/embeds/stats', {
            headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('token')
            }
        });
        const stats = await response.json();
        
        document.getElementById('total-embeds').textContent = stats.totalEmbeds || 0;
        document.getElementById('embed-views').textContent = stats.totalViews || 0;
        document.getElementById('active-syncs').textContent = stats.activeSyncs || 0;
    } catch (error) {
        console.error('Error loading stats:', error);
    }
}

async function loadEmbeds() {
    try {
        const response = await fetch('/api/admin/embeds?limit=10&sort=created&order=desc', {
            headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('token')
            }
        });
        const data = await response.json();
        
        const embedsTable = document.getElementById('embeds-table');
        
        if (data.embeds && data.embeds.length > 0) {
            embedsTable.innerHTML = data.embeds.map(embed => `
                <div class="embed-item">
                    <div class="embed-info">
                        <div class="embed-url">${escapeHtml(embed.url)}</div>
                        <div class="embed-meta">
                            Template: ${embed.template} | 
                            Created: ${new Date(embed.created).toLocaleDateString()} |
                            Load Time: ${Math.round(embed.performance.avgLoadTime)}ms
                        </div>
                    </div>
                    <div class="embed-stats">
                        <div class="embed-views">${embed.views}</div>
                        <div class="embed-label">Views</div>
                    </div>
                    <div class="embed-actions">
                        <button onclick="viewEmbedAnalytics('${embed.id}')" class="btn btn-sm btn-outline-primary">
                            📊 Analytics
                        </button>
                        <button onclick="copyEmbedLink('${embed.id}')" class="btn btn-sm btn-outline-secondary">
                            📋 Copy
                        </button>
                    </div>
                </div>
            `).join('');
        } else {
            embedsTable.innerHTML = '<div class="loading">No embeds created yet</div>';
        }
    } catch (error) {
        console.error('Error loading embeds:', error);
        document.getElementById('embeds-table').innerHTML = '<div class="loading">Error loading embeds</div>';
    }
}

async function viewEmbedAnalytics(embedId) {
    try {
        const response = await fetch(`/api/embeds/${embedId}/analytics?period=7d`, {
            headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('token')
            }
        });
        const analytics = await response.json();
        
        // Show analytics in a modal or new section
        alert(`Analytics for embed ${embedId}:\n\nTotal Views: ${analytics.summary.totalViews}\nUnique Views: ${analytics.summary.uniqueViews}\nAvg Load Time: ${Math.round(analytics.summary.avgLoadTime)}ms`);
    } catch (error) {
        console.error('Error loading analytics:', error);
    }
}

function copyEmbedLink(embedId) {
    const link = `${window.location.origin}/embed/${embedId}`;
    navigator.clipboard.writeText(link).then(() => {
        alert('Embed link copied to clipboard!');
    });
}

function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// YouTube Embed Functions
async function createYouTubeEmbed() {
    const urlInput = document.getElementById('youtube-url').value;
    const template = document.getElementById('youtube-template').value;
    
    // Extract video ID from various YouTube URL formats
    const videoId = extractYouTubeId(urlInput);
    if (!videoId) {
        alert('Please enter a valid YouTube URL or video ID');
        return;
    }
    
    // Gather feature settings
    const features = {
        autoplay: document.getElementById('yt-autoplay').checked,
        controls: document.getElementById('yt-controls').checked,
        loop: document.getElementById('yt-loop').checked,
        privacyMode: document.getElementById('yt-privacy').checked,
        captions: document.getElementById('yt-captions').checked,
        annotations: document.getElementById('yt-annotations').checked
    };
    
    // Check experimental features
    const experimental = {
        aura: document.getElementById('enable-aura')?.checked,
        aiAnalytics: document.getElementById('enable-ai')?.checked,
        liveSync: document.getElementById('enable-sync')?.checked,
        dynamicThemes: document.getElementById('enable-themes')?.checked
    };
    
    try {
        const response = await fetch('/api/embeds/youtube', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + localStorage.getItem('token')
            },
            body: JSON.stringify({
                videoId,
                template,
                features,
                customization: { experimental }
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Show preview
            showYouTubePreview(data.embedId, videoId);
            
            // Copy embed code to clipboard
            navigator.clipboard.writeText(data.embedCode);
            alert('YouTube embed created! Code copied to clipboard.');
            
            // Update stats
            updateYouTubeStats();
        }
    } catch (error) {
        console.error('Error creating YouTube embed:', error);
        alert('Failed to create YouTube embed');
    }
}

function extractYouTubeId(url) {
    // Handle various YouTube URL formats
    const patterns = [
        /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\s]+)/,
        /^[a-zA-Z0-9_-]{11}$/
    ];
    
    for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match) {
            return match[1] || match[0];
        }
    }
    return null;
}

function showYouTubePreview(embedId, videoId) {
    const previewContainer = document.getElementById('youtube-preview');
    const previewFrame = document.getElementById('preview-frame');
    
    previewContainer.style.display = 'block';
    previewFrame.innerHTML = `
        <iframe 
            width="100%" 
            height="400" 
            src="/embed/youtube/${embedId}"
            frameborder="0" 
            allowfullscreen>
        </iframe>
    `;
    
    // Smooth scroll to preview
    previewContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

function refreshPreview() {
    const iframe = document.querySelector('#preview-frame iframe');
    if (iframe) {
        iframe.src = iframe.src;
    }
}

function openFullPreview() {
    const iframe = document.querySelector('#preview-frame iframe');
    if (iframe) {
        window.open(iframe.src, '_blank');
    }
}

async function updateYouTubeStats() {
    try {
        const response = await fetch('/api/admin/youtube/stats', {
            headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('token')
            }
        });
        const stats = await response.json();
        
        document.getElementById('youtube-embeds').textContent = stats.totalEmbeds || 0;
        document.getElementById('youtube-views').textContent = stats.totalViews || 0;
        document.getElementById('watch-time').textContent = formatWatchTime(stats.totalWatchTime || 0);
        document.getElementById('live-viewers').textContent = stats.liveViewers || 0;
        
        // Update analytics
        document.getElementById('yt-total-views').textContent = stats.totalViews || 0;
        document.getElementById('yt-avg-watch').textContent = formatTime(stats.avgWatchTime || 0);
        document.getElementById('yt-engagement').textContent = (stats.engagementRate || 0) + '%';
        document.getElementById('yt-completion').textContent = (stats.completionRate || 0) + '%';
        
        // Update quality chart
        updateQualityChart(stats.qualityDistribution || {});
    } catch (error) {
        console.error('Error loading YouTube stats:', error);
    }
}

function formatWatchTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
}

function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
}

function updateQualityChart(distribution) {
    const chart = document.getElementById('quality-chart');
    const qualities = ['144p', '240p', '360p', '480p', '720p', '1080p', '1440p', '2160p'];
    const maxValue = Math.max(...Object.values(distribution), 1);
    
    chart.innerHTML = qualities.map(quality => {
        const value = distribution[quality] || 0;
        const height = (value / maxValue) * 100;
        return `
            <div class="quality-bar" style="height: ${height}%;" title="${quality}: ${value} views">
                <span class="quality-label">${quality}</span>
            </div>
        `;
    }).join('');
}

// Experimental features handlers
document.getElementById('enable-aura').addEventListener('change', function(e) {
    if (e.target.checked) {
        // Update embed template selection
        const templateSelect = document.getElementById('youtube-template');
        if (!Array.from(templateSelect.options).some(opt => opt.value === 'aura')) {
            const option = new Option('🌟 Aura Mode', 'aura');
            option.className = 'experimental';
            templateSelect.add(option);
        }
        templateSelect.value = 'aura';
    }
});

document.getElementById('enable-ai').addEventListener('change', async function(e) {
    if (e.target.checked) {
        // Load AI insights
        const aiDashboard = document.querySelector('.ai-dashboard') || createAIDashboard();
        aiDashboard.style.display = 'block';
        await loadAIInsights();
    } else {
        const aiDashboard = document.querySelector('.ai-dashboard');
        if (aiDashboard) aiDashboard.style.display = 'none';
    }
});

function createAIDashboard() {
    const dashboard = document.createElement('div');
    dashboard.className = 'ai-dashboard';
    dashboard.innerHTML = `
        <h4>🤖 AI-Powered Insights</h4>
        <div class="ai-insights" id="ai-insights">
            <div class="insight-card">
                <div class="insight-value">85%</div>
                <div class="insight-label">Content Match Score</div>
            </div>
            <div class="insight-card">
                <div class="insight-value">Peak @ 2:34</div>
                <div class="insight-label">Engagement Peak</div>
            </div>
            <div class="insight-card">
                <div class="insight-value">92%</div>
                <div class="insight-label">Audience Retention</div>
            </div>
            <div class="insight-card">
                <div class="insight-value">High</div>
                <div class="insight-label">Virality Potential</div>
            </div>
        </div>
        <div id="ai-recommendations" style="margin-top: 20px;">
            <h5>AI Recommendations</h5>
            <ul>
                <li>🎯 Best posting time: 2-4 PM based on audience activity</li>
                <li>📊 Similar content performs 3x better with thumbnails</li>
                <li>🔄 Consider creating a playlist for better retention</li>
            </ul>
        </div>
    `;
    document.querySelector('.experimental-features').appendChild(dashboard);
    return dashboard;
}

async function loadAIInsights() {
    // This would fetch from a real AI analytics endpoint
    try {
        const response = await fetch('/api/youtube/ai-insights', {
            headers: {
                'Authorization': 'Bearer ' + localStorage.getItem('token')
            }
        });
        const insights = await response.json();
        // Update AI dashboard with real data
    } catch (error) {
        console.error('Error loading AI insights:', error);
    }
}

// Enhanced embed creation with experimental features
const originalCreateEmbed = createEmbed;
createEmbed = async function() {
    // Check if experimental features are enabled
    const hasAura = document.getElementById('enable-aura')?.checked;
    const hasAI = document.getElementById('enable-ai')?.checked;
    
    if (hasAura || hasAI) {
        // Add experimental features to customization
        const customization = JSON.parse(document.getElementById('embed-customization').value || '{}');
        customization.experimental = {
            aura: hasAura,
            aiAnalytics: hasAI
        };
        document.getElementById('embed-customization').value = JSON.stringify(customization, null, 2);
    }
    
    // Call original function
    return originalCreateEmbed.apply(this, arguments);
};

// Initialize on load
document.addEventListener('DOMContentLoaded', function() {
    updateYouTubeStats();
    setInterval(updateYouTubeStats, 30000); // Update every 30 seconds
});
</script>

<!-- Add after Ultra Pro Max Website Embeds section -->
<div class="dashboard-section">
    <h2>📺 YouTube Pro Embeds</h2>
    <div class="youtube-embed-section">
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value" id="youtube-embeds">0</div>
                <div class="stat-label">YouTube Embeds</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="youtube-views">0</div>
                <div class="stat-label">Total Video Views</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="watch-time">0h</div>
                <div class="stat-label">Watch Time</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="live-viewers">0</div>
                <div class="stat-label">Live Viewers</div>
            </div>
        </div>
        
        <div class="youtube-creator">
            <h3>Create YouTube Embed</h3>
            <div class="form-row">
                <div class="form-group">
                    <label>YouTube URL or Video ID:</label>
                    <input type="text" id="youtube-url" class="form-control" placeholder="https://youtube.com/watch?v=... or dQw4w9WgXcQ">
                </div>
                <div class="form-group">
                    <label>Embed Type:</label>
                    <select id="youtube-template" class="form-control">
                        <option value="standard">Standard Player</option>
                        <option value="minimal">Minimal</option>
                        <option value="theater">Theater Mode</option>
                        <option value="immersive">Immersive Experience</option>
                        <option value="aura" class="experimental">🌟 Aura Mode (Experimental)</option>
                    </select>
                </div>
            </div>
            
            <div class="youtube-features">
                <h4>Player Features</h4>
                <div class="feature-toggles">
                    <label class="feature-toggle">
                        <input type="checkbox" id="yt-autoplay"> Autoplay
                    </label>
                    <label class="feature-toggle">
                        <input type="checkbox" id="yt-controls" checked> Show Controls
                    </label>
                    <label class="feature-toggle">
                        <input type="checkbox" id="yt-loop"> Loop Video
                    </label>
                    <label class="feature-toggle">
                        <input type="checkbox" id="yt-privacy" checked> Privacy Mode
                    </label>
                    <label class="feature-toggle">
                        <input type="checkbox" id="yt-captions"> Show Captions
                    </label>
                    <label class="feature-toggle">
                        <input type="checkbox" id="yt-annotations"> Annotations
                    </label>
                </div>
            </div>
            
            <button onclick="createYouTubeEmbed()" class="btn btn-danger">
                <span class="btn-icon">▶️</span> Create YouTube Embed
            </button>
        </div>
        
        <div id="youtube-preview" style="display: none;" class="preview-container">
            <h4>Live Preview</h4>
            <div id="preview-frame"></div>
            <div class="preview-controls">
                <button onclick="refreshPreview()" class="btn btn-secondary">🔄 Refresh</button>
                <button onclick="openFullPreview()" class="btn btn-secondary">🔗 Full Preview</button>
            </div>
        </div>
        
        <div class="youtube-analytics">
            <h3>YouTube Analytics</h3>
            <div class="analytics-grid">
                <div class="metric-card">
                    <div class="metric-icon">👁️</div>
                    <div class="metric-value" id="yt-total-views">0</div>
                    <div class="metric-label">Total Views</div>
                </div>
                <div class="metric-card">
                    <div class="metric-icon">⏱️</div>
                    <div class="metric-value" id="yt-avg-watch">0:00</div>
                    <div class="metric-label">Avg Watch Time</div>
                </div>
                <div class="metric-card">
                    <div class="metric-icon">📊</div>
                    <div class="metric-value" id="yt-engagement">0%</div>
                    <div class="metric-label">Engagement Rate</div>
                </div>
                <div class="metric-card">
                    <div class="metric-icon">🎯</div>
                    <div class="metric-value" id="yt-completion">0%</div>
                    <div class="metric-label">Completion Rate</div>
                </div>
            </div>
            
            <div class="quality-distribution">
                <h4>Quality Distribution</h4>
                <div id="quality-chart"></div>
            </div>
        </div>
    </div>
</div>

<!-- Experimental Features Section -->
<div class="dashboard-section">
    <h2>🧪 Experimental Features</h2>
    <div class="experimental-features">
        <div class="feature-grid">
            <div class="feature-card beta">
                <div class="feature-icon">🌟</div>
                <h4>Aura Effects</h4>
                <p>Immersive visual effects that adapt to video content and create ambient lighting.</p>
                <label class="switch">
                    <input type="checkbox" id="enable-aura">
                    <span class="slider"></span>
                </label>
            </div>
            
            <div class="feature-card experimental">
                <div class="feature-icon">🤖</div>
                <h4>AI Analytics</h4>
                <p>Machine learning-powered insights for content optimization and viewer behavior.</p>
                <label class="switch">
                    <input type="checkbox" id="enable-ai">
                    <span class="slider"></span>
                </label>
            </div>
            
            <div class="feature-card beta">
                <div class="feature-icon">🔄</div>
                <h4>Live Sync</h4>
                <p>Synchronized playback across multiple viewers for watch parties.</p>
                <label class="switch">
                    <input type="checkbox" id="enable-sync">
                    <span class="slider"></span>
                </label>
            </div>
            
            <div class="feature-card experimental">
                <div class="feature-icon">🎨</div>
                <h4>Dynamic Themes</h4>
                <p>Auto-generate embed themes based on video content and thumbnails.</p>
                <label class="switch">
                    <input type="checkbox" id="enable-themes">
                    <span class="slider"></span>
                </label>
            </div>
        </div>
    </div>
</div>